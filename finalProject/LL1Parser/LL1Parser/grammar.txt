PROGRAM 		FUNC_PROTO FUNCTION
FUNC_PROTO 		TYPE [identifier] ( PARAMS ) ; FUNC_PROTO
FUNC_PROTO		lambda
TYPE 			int
TYPE 			float
TYPE 			void
TYPE 			string
PARAMS TYPE 		[identifier] M_TYPE_PARAMS
PARAMS 			lambda
MULTI_PARAMS 		TYPE[identifier] M_TYPE_PARAMS
M_TYPE_PARAMS 		, MULTI_PARAMS
M_TYPE_PARAMS 		lambda
FUNCTION 		TYPE [identifier] ( PARAMS ) { STAT_LIST return ; OPT_EXP} FUNCTION
FUNCTION		lambda
STAT_LIST 		STAT ; STAT_LIST
STAT_LIST		lambda
STAT			if ( EXPRESSION ) { STAT_LIST } ELSE
STAT 			while ( EXPRESSION ) { STAT_LIST }
STAT			[identifier] M_ID_STAT
STAT 			cout << EXPRESSION
STAT 			cin >> [identifier]
STAT 			VAR_DECL
STAT 			( EXPRESSION )  EXPR_RECURS
STAT 			[integer] EXPR_RECURS
STAT 			[float] EXPR_RECURS
STAT 			[string] EXPR_RECURS
M_ID_STAT		= EXPRESSION
M_ID_STAT		[operator] EXPRESSION EXPR_RECURS
M_ID_STAT		M_ID_PROC_CALL EXPR_RECURS
M_ID_STAT		lambda
EXPRESSION 		[identifier] M_EXPRESSION
EXPRESSION 		( EXPRESSION )  EXPR_RECURS
EXPRESSION 		[integer] EXPR_RECURS
EXPRESSION 		[float] EXPR_RECURS
EXPRESSION 		[string] EXPR_RECURS
M_EXPRESSION		[operator] EXPRESSION EXPR_RECURS
M_EXPRESSION		( M_OPT_ARGS
M_EXPRESSION		lambda
M_OPT_ARGS		) EXPR_RECURS
M_OPT_ARGS 		ARGS ) EXPR_RECURS
EXPR_RECURS 		[operator] EXPRESSION EXPR_RECURS
EXPR_RECURS 		lambda
ELSE 			else MORE_ELSE
ELSE			lambda
MORE_ELSE 		if ( EXPRESSION ) { STAT_LIST } ELSE
MORE_ELSE 		{ STAT_LIST }
M_ID_PROC_CALL 		( M_OPT_ARGS
ARGS			EXPRESSION M_EXP_ARGS
M_EXP_ARGS 		, ARGS
M_EXP_ARGS 		lambda
VAR_DECL 		TYPE [identifier] M_TYPE_VAR_DECL
M_TYPE_VAR_DECL 	= EXPRESSION
M_TYPE_VAR_DECL 	lambda
OPT_EXP 		EXPRESSION
OPT_EXP 		lambda